1:HL["/_next/static/css/26351ac1a6eca06c.css",{"as":"style"}]
0:[[["",{"children":["articles",{"children":[["slug","ok","d"],{"children":["__PAGE__?{\"slug\":\"ok\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/26351ac1a6eca06c.css","precedence":"next"}]],["$L3",null]]]]
4:HL["/_next/static/css/7f6bd37aab40623f.css",{"as":"style"}]
5:I{"id":"414","chunks":["414:static/chunks/414-4c4d64a76277ff85.js","345:static/chunks/app/articles/page/[slug]/page-b019257bdb7591a1.js"],"name":"","async":false}
6:I{"id":"9544","chunks":["272:static/chunks/webpack-afd6b160f7b2e7a5.js","667:static/chunks/2443530c-da705fa45a107f29.js","139:static/chunks/139-a98e23425a4dfbf4.js"],"name":"","async":false}
7:I{"id":"99","chunks":["272:static/chunks/webpack-afd6b160f7b2e7a5.js","667:static/chunks/2443530c-da705fa45a107f29.js","139:static/chunks/139-a98e23425a4dfbf4.js"],"name":"","async":false}
8:I{"id":"1389","chunks":["120:static/chunks/120-384f50ccf38e1ade.js","70:static/chunks/app/articles/layout-8324812b78a65603.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"zh-CN","className":"scroll-smooth dark","children":[["$","meta",null,{"charSet":"utf-8"}],["$","body",null,{"children":[["$","div",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"h-screen flex flex-col justify-between","children":[["$","header",null,{"className":"flex items-center justify-around py-10","children":[["$","div",null,{"children":["$","$L5",null,{"href":"/","children":["$","div",null,{"className":"flex items-center justify-between","children":["$","div",null,{"className":"hidden h-6 text-2xl font-semibold sm:block","children":["$","a",null,{"children":"HAN个人博客"}]}]}]}]}],["$","div",null,{"className":"flex items-center text-base leading-5","children":["$","div",null,{"className":"hidden sm:block","children":[["$","$L5","/",{"href":"/","className":"p-1 font-medium text-gray-900 dark:text-gray-100 sm:p-4","children":"主页"}],["$","$L5","/articles",{"href":"/articles","className":"p-1 font-medium text-gray-900 dark:text-gray-100 sm:p-4","children":"文章"}],["$","$L5","/about",{"href":"/about","className":"p-1 font-medium text-gray-900 dark:text-gray-100 sm:p-4","children":"关于"}]]}]}],["$","div",null,{}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pt-6 pb-8 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"抱歉，这个页面暂时没找到"}],["$","p",null,{"className":"mb-8","children":"别急，您可以可以返回首页找找！"}],["$","$L5",null,{"href":"/","children":["$","button",null,{"className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"返回主页"}]}]]}]]}],"notFoundStyles":[],"asNotFound":"$undefined","childProp":{"current":[["$","$L8",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children",["slug","ok","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L9",null],"segment":"__PAGE__?{\"slug\":\"ok\"}"},"styles":[]}],"segment":["slug","ok","d"]},"styles":[]}],"params":{}}],null],"segment":"articles"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7f6bd37aab40623f.css","precedence":"next"}]]}]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"© 2023"}],["$","div",null,{"children":" • "}],["$","$L5",null,{"href":"/","children":"HAN|博客"}]]}]}]}]]}]}],["$","div",null,{}]]}]]}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"HAN Blog"}],["$","meta",null,{"name":"description","content":"Created by HAN"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"\\favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
9:["$","div",null,{"className":"flex justify-center","children":["$","div",null,{"className":"prose dark:prose-invert mt-10","children":[["$","h1",null,{"children":"如何使用 ChatGPT 3.5 API 创建自己的智能应用？"}],["$","div",null,{"className":"items-center","children":["$","$L5",null,{"href":"articles","children":"返回文档列表"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<h2>前言</h2>\n<p>OPEN AI 的开放 API 可以说是前端开发者的福利，我们只需要调用 api，就可以创建一个智能应用，\n在上一篇文章中，我们介绍了《基于 ChatGPT API 的划词翻译浏览器脚本实现》，使用的模型是 <code>text-davinci-003</code> 也就是文本补全模型，今天我们将使用 <code>gpt-3.5-turbo</code> 模型来实现一个场景化的智能应用。</p>\n<h2>OPEN AI API 介绍</h2>\n<h3>自动完成 API</h3>\n<p><code>POST https://api.openai.com/v1/completions</code></p>\n<p>以下是自动完成 API，有了 OPENAI_API_KEY 之后，我们只需要传入 prompt</p>\n<pre><code>const OPENAI_API_KEY = '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'\n\nconst prompt = `Translate this into Chinese:\n        hello world`\nconst res = await fetch('https://api.openai.com/v1/completions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    authorization: `Bearer ${OPENAI_API_KEY}`,\n  },\n  body: JSON.stringify({\n    model: 'text-davinci-003',\n    prompt,\n    max_tokens: 1000,\n    temperature: 0,\n  }),\n})\nconst response = await res.json()\n\nconst result = response.choices[0].text\n</code></pre>\n<h3>对话 API</h3>\n<p><code>POST https://api.openai.com/v1/chat/completions</code></p>\n<p>由于自动补全 API 只能传入一个参数 prompt，AI 不能够理解上下文的场景，因此 gpt-3.5+ API 是为了让 AI 能够支持基于一组对话来返回数据。</p>\n<p>在 Node.js 中可以使用以下代码来实现。</p>\n<pre><code>const OPENAI_API_KEY = \"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\";\n\nconst prompt = [...];\nconst res = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    authorization: `Bearer ${OPENAI_API_KEY}`,\n  },\n  body: JSON.stringify({\n    model: \"gpt-3.5-turbo\",\n    messages,\n    temperature: 0.7,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    max_tokens: 500\n  }),\n});\nconst response = await res.json();\n\nconst result = response.choices[0].message\n</code></pre>\n<p>以下是官网给出 messages 例子</p>\n<pre><code>const messages = [\n  { role: 'system', content: 'You are a helpful assistant.' },\n  { role: 'user', content: 'Who won the world series in 2020?' },\n  { role: 'assistant', content: 'The Los Angeles Dodgers won the World Series in 2020.' },\n  { role: 'user', content: 'Where was it played?' },\n]\n</code></pre>\n<ul>\n<li>每一个 message 由 <code>role</code> 和 <code>content</code> 组成。</li>\n<li><code>role</code> 只能是 3 个值， <code>system</code>、<code>user</code> 和 <code>assistant</code></li>\n<li><code>system</code> 和 <code>assistant</code> 是可选的，<code>user</code> 是必须的。</li>\n</ul>\n<p>官方提供了 <a href=\"https://platform.openai.com/playground?mode=chat\">playground</a> 帮助我们创建 messages 信息。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35c1ce17ffe54bd6b61324951e46b2fe~tplv-k3u1fbpfcp-watermark.image?\" alt=\"openai playground\"></p>\n<p><code>assistant</code> 也就是其中一次返回的数据信息。\n发送的 messages 如下：</p>\n<pre><code>const messages = [\n  {\n    role: 'system',\n    content: '你是一名精通 typescript 的前端工程师，不需要解释',\n  },\n  {\n    role: 'user',\n    content:\n      'Convert the following JSON to typescript interface without explanation\\n\\n{\\n  \"name\": \"Allen\",\\n  \"age\": 18\\n}',\n  },\n]\n</code></pre>\n<p>比如使用上面的 messages 信息，我们就可以根据它，来创建一个 Tailwind css 代码生成器。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e7395aeaab74cf396d5539eb9d2f78e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"openai playground 拷贝 fetch\"></p>\n<p>通过右键可以直接拷贝为 Node.js fetch 代码。</p>\n<p>再来实现一个 JSON 转 Typescript 的例子</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/048e56b8e89443469214a37a1f3511ae~tplv-k3u1fbpfcp-watermark.image?\" alt=\"openai playground JSON 转 Typescript\"></p>\n<p>那么我们通过以上截图的 messages，就可以创建一个 JSON 转 Typescript 生成器。</p>\n<h2>在 Next.js 使用</h2>\n<p>接下来，我们就在 Next.js 中创建一个全栈应用。</p>\n<p>那为什么选择使用 Next.JS 呢？</p>\n<ol>\n<li>它是一个全栈框架，既可以写接口也可以使用 react 写前端；</li>\n<li>可以很轻松部署到 verel， 让我们可以直接访问 OPENAI 的接口，摆脱网络限制。</li>\n</ol>\n<p>这里我选择使用大圣老师的<a href=\"https://github.com/shengxinjing/email-helper\">email-helper</a>模板</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97358b3e64cb461bb85005093e5c0205~tplv-k3u1fbpfcp-watermark.image?\" alt=\"创建github仓库\"></p>\n<p>点击 GitHub 选择 Use this Template， 创建一个自己的仓库</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a597557faf540fa8be68b1564fe270a~tplv-k3u1fbpfcp-watermark.image?\" alt=\"目录结构\"></p>\n<p>这个项目很简单，在 pages 目录下 <code>api/generate.ts</code> 用于代理请求接口。</p>\n<p><code>index.tsx</code> 也就是我们的主界面，一个按钮，一个请求，没有其他复杂逻辑。</p>\n<p>接下来我们就根据它来创建一个智能的<strong>Tailwind CSS 代码生成器</strong></p>\n<p>1、首先将 messages 改成以上截图中的 message</p>\n<p>2、然后将需要生成的变量存到 state 中，我们就可以实现如下界面</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81421d407f4e4a7ebe0be7033dc59289~tplv-k3u1fbpfcp-watermark.image?\" alt=\"Tailwind CSS 代码生成器界面\"></p>\n<p>点击生成代码就可以 让 ai 帮我们写代码了。</p>\n<p>这个界面，有些单调，可以在这个页面上列一些常用的组件，那么也可以直接使用 chatGPT 来生成。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4294a3e86b04fcba87750af06168ba5~tplv-k3u1fbpfcp-watermark.image?\" alt=\"chatGPT 生成组件\"></p>\n<p>将 GPT 回答直接转换成 JSON 数据</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ab9ad38ad9f481cacd9dcc989021f0a~tplv-k3u1fbpfcp-watermark.image?\" alt=\"chatGPT 转 JSON 数据\"></p>\n<p>将数据渲染到页面中，就可以生成快捷标签了</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b2a4e43a37849f88c3268748fd0af87~tplv-k3u1fbpfcp-watermark.image?\" alt=\"实现效果\"></p>\n<p>接下来，再将 Tailwind css 的颜色，作为我们的变量，同样使用 GPT 来生成数据</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d2d3f014c9a4d89b6a2b14706d71858~tplv-k3u1fbpfcp-watermark.image?\" alt=\"生成 Tailwind 颜色\"></p>\n<p>用同样的方式，转化成 JSON，拷贝到我们的代码中。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22953d0bc5014037a9c74b4aac6df6dd~tplv-k3u1fbpfcp-watermark.image?\" alt=\"Tailwind CSS 代码生成器效果\"></p>\n<p>最后一步，我们需要实现一个预览效果，这样的话，就可以所见即所得，根据效果，直接拷贝想要的代码。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7950bdddf1c04b50b5e3a9564c9eaf1c~tplv-k3u1fbpfcp-watermark.image?\" alt=\"\"></p>\n<h2>小结</h2>\n<p>本文介绍了 openai 的 api 使用方法，以及如何使用 openai 的 playground 生成需要的 messages 信息。并且通过一个 Next.js 实战例子，结合 ChatGPT 开发了一个 Tailwind CSS 代码生成器。</p>\n<h2>最后</h2>\n<p>贴一下文本的代码仓库和预览地址</p>\n<p>代码仓库：https://github.com/maqi1520/openai-helper</p>\n<p>预览地址：https://openai.maqib.cn/</p>\n<p>如果对你有帮助，记得给个三连，感谢你的阅读。</p>\n<hr>\n<p><strong><em>本文正在参加<a href=\"https://juejin.cn/post/7207698564641996856/\" title=\"https://juejin.cn/post/7207698564641996856/\">「金石计划」</a></em></strong></p>\n"}}],["$","div",null,{"className":"items-center","children":["$","$L5",null,{"href":"articles","children":"返回文档列表"}]}]]}]}]
